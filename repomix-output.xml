This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where content has been compressed (code blocks are separated by ⋮---- delimiter).

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: **/wwwroot/**, **/bin/**, **/obj/**, **/Migrations/**, **/Properties/**, **/*.json, **/*.http, **/*.sln, **/*.DotSettings.user
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitignore
GolfClubManagerAPI/Controllers/BookingController.cs
GolfClubManagerAPI/Controllers/MemberController.cs
GolfClubManagerAPI/Controllers/TeeTimeController.cs
GolfClubManagerAPI/Data/ApplicationDbContext.cs
GolfClubManagerAPI/Data/Member.cs
GolfClubManagerAPI/Data/TeeTimeBooking.cs
GolfClubManagerAPI/Data/TeeTimeSlot.cs
GolfClubManagerAPI/DTOs/BookingDisplayDTO.cs
GolfClubManagerAPI/DTOs/BookingDTO.cs
GolfClubManagerAPI/DTOs/MemberDTO.cs
GolfClubManagerAPI/DTOs/PlayerDTO.cs
GolfClubManagerAPI/DTOs/TeeTimeSlotDTO.cs
GolfClubManagerAPI/GolfClubManagerAPI.csproj
GolfClubManagerAPI/Program.cs
GolfClubManagerAPI/Services/BookingService.cs
GolfClubManagerAPI/Services/MemberService.cs
GolfClubManagerWASM/_Imports.razor
GolfClubManagerWASM/App.razor
GolfClubManagerWASM/DTOs/BookingDisplayDTO.cs
GolfClubManagerWASM/DTOs/BookingDTO.cs
GolfClubManagerWASM/DTOs/MemberCreateDTO.cs
GolfClubManagerWASM/DTOs/MemberDTO.cs
GolfClubManagerWASM/DTOs/PlayerDTO.cs
GolfClubManagerWASM/DTOs/TeeTimeSlotDTO.cs
GolfClubManagerWASM/GolfClubManagerWASM.csproj
GolfClubManagerWASM/Layout/MainLayout.razor
GolfClubManagerWASM/Layout/MainLayout.razor.css
GolfClubManagerWASM/Layout/NavMenu.razor
GolfClubManagerWASM/Layout/NavMenu.razor.css
GolfClubManagerWASM/Members.razor
GolfClubManagerWASM/Models/Member.cs
GolfClubManagerWASM/Models/TeeTimeBooking.cs
GolfClubManagerWASM/Pages/Bookings.razor
GolfClubManagerWASM/Pages/Home.razor
GolfClubManagerWASM/Pages/Members.razor
GolfClubManagerWASM/Program.cs
GolfClubManagerWASM/Services/BookingService.cs
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="GolfClubManagerAPI/DTOs/PlayerDTO.cs">
public class PlayerDTO
</file>

<file path="GolfClubManagerAPI/DTOs/TeeTimeSlotDTO.cs">
public class TeeTimeSlotDTO
</file>

<file path="GolfClubManagerAPI/GolfClubManagerAPI.csproj">
<Project Sdk="Microsoft.NET.Sdk.Web">

    <PropertyGroup>
        <TargetFramework>net8.0</TargetFramework>
        <Nullable>enable</Nullable>
        <ImplicitUsings>enable</ImplicitUsings>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="8.0.13" />
        <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="9.0.2">
          <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
          <PrivateAssets>all</PrivateAssets>
        </PackageReference>
        <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="9.0.2" />
        <PackageReference Include="Swashbuckle.AspNetCore" Version="6.6.2" />
    </ItemGroup>

</Project>
</file>

<file path="GolfClubManagerWASM/_Imports.razor">
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.AspNetCore.Components.WebAssembly.Http
@using Microsoft.JSInterop
@using GolfClubManagerWASM
@using GolfClubManagerWASM.Layout
</file>

<file path="GolfClubManagerWASM/App.razor">
<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)"/>
        <FocusOnNavigate RouteData="@routeData" Selector="h1"/>
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>
</file>

<file path="GolfClubManagerWASM/DTOs/MemberDTO.cs">
public class MemberDTO
</file>

<file path="GolfClubManagerWASM/DTOs/PlayerDTO.cs">
public class PlayerDTO
</file>

<file path="GolfClubManagerWASM/DTOs/TeeTimeSlotDTO.cs">
public class TeeTimeSlotDTO
</file>

<file path="GolfClubManagerWASM/Members.razor">
@using GolfClubManagerWASM.Models
@inject HttpClient Http
@code {
    private List<Member> members;
    protected override async Task OnInitializedAsync()
    {
        members = await Http.GetFromJsonAsync<List<Member>>("https://localhost:5001/api/members");
    }
}
</file>

<file path="GolfClubManagerWASM/Models/TeeTimeBooking.cs">
public class TeeTimeBooking
</file>

<file path=".gitignore">
# Ignore build directories
bin/
obj/

# Ignore Rider and Visual Studio files
*.DotSettings
.idea/
.vs/

# Ignore compiled binaries and package caches
*.dll
*.exe
*.pdb
*.log
*.cache
*.lock
*.csproj.nuget.*

# Ignore user-specific settings
*.user
*.suo
*.userosscache
*.sln.docstates

# Ignore Entity Framework migrations cache
Migrations/*.Designer.cs
Migrations/*.resx

# Ignore frontend dependencies (if applicable)
node_modules/

# Ignore temporary and OS-specific files
Thumbs.db
.DS_Store

# additional files
repomix-output.txt
</file>

<file path="GolfClubManagerAPI/DTOs/BookingDTO.cs">
public class BookingDTO
</file>

<file path="GolfClubManagerAPI/DTOs/MemberDTO.cs">
public class MemberDTO
</file>

<file path="GolfClubManagerWASM/DTOs/BookingDTO.cs">
public class BookingDTO
</file>

<file path="GolfClubManagerWASM/DTOs/MemberCreateDTO.cs">
public class MemberCreateDTO
</file>

<file path="GolfClubManagerWASM/GolfClubManagerWASM.csproj">
<Project Sdk="Microsoft.NET.Sdk.BlazorWebAssembly">

    <PropertyGroup>
        <TargetFramework>net8.0</TargetFramework>
        <Nullable>enable</Nullable>
        <ImplicitUsings>enable</ImplicitUsings>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly" Version="8.0.13" />
        <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly.DevServer" Version="8.0.13" PrivateAssets="all" />
    </ItemGroup>

    <ItemGroup>
      <Folder Include="wwwroot\images\" />
    </ItemGroup>

</Project>
</file>

<file path="GolfClubManagerWASM/Layout/MainLayout.razor.css">
.page {
⋮----
main {
⋮----
.nav-menu {
⋮----
.sidebar {
⋮----
background-color: #1b6ec2; /* matches .btn-primary background */
⋮----
.nav-item ::deep a {
⋮----
.nav-item ::deep a.active {
⋮----
.nav-item ::deep a:hover {
⋮----
.top-row {
⋮----
.top-row ::deep a, .top-row ::deep .btn-link {
⋮----
.top-row ::deep a:hover, .top-row ::deep .btn-link:hover {
⋮----
.top-row ::deep a:first-child {
⋮----
.top-row.auth ::deep a:first-child {
⋮----
.top-row, article {
</file>

<file path="GolfClubManagerWASM/Layout/NavMenu.razor.css">
.navbar-toggler {
⋮----
.top-row {
⋮----
.navbar-brand {
⋮----
.nav-menu {
⋮----
.bi {
⋮----
.bi-house-door-fill-nav-menu {
⋮----
.bi-plus-square-fill-nav-menu {
⋮----
.bi-list-nested-nav-menu {
⋮----
.nav-item {
⋮----
.nav-item:first-of-type {
⋮----
.nav-item:last-of-type {
⋮----
.nav-item ::deep a {
⋮----
.nav-item ::deep a.active {
⋮----
.nav-item ::deep a:hover {
⋮----
.collapse {
⋮----
/* Never collapse the sidebar for wide screens */
⋮----
.nav-scrollable {
⋮----
/* Allow sidebar to scroll for tall menus */
</file>

<file path="GolfClubManagerWASM/Models/Member.cs">
public class Member
</file>

<file path="GolfClubManagerWASM/Program.cs">
var builder = WebAssemblyHostBuilder.CreateDefault(args);
⋮----
//builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });
builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri("http://localhost:5080") });
⋮----
await builder.Build().RunAsync();
</file>

<file path="GolfClubManagerAPI/Controllers/MemberController.cs">
// MemberController.cs
⋮----
public class MemberController : ControllerBase
⋮----
private readonly MemberService _memberService;
⋮----
// POST: api/member
⋮----
public async Task<ActionResult<Member>> AddMember(Member member)
⋮----
var addedMember = await _memberService.AddMemberAsync(member);
⋮----
// GET: api/member/{id}
⋮----
public async Task<ActionResult<Member>> GetMemberById(int id)
⋮----
var member = await _memberService.GetMemberByIdAsync(id);
⋮----
public async Task<ActionResult<IEnumerable<MemberDTO>>> GetMembers(
⋮----
var members = await _memberService.GetAllMembersAsync(gender, handicapRange, sortBy, order);
</file>

<file path="GolfClubManagerAPI/Data/ApplicationDbContext.cs">
public class ApplicationDbContext : DbContext
⋮----
protected override void OnModelCreating(ModelBuilder modelBuilder)
⋮----
base.OnModelCreating(modelBuilder);
⋮----
// Unique constraint to ensure a member can only book once per day
⋮----
.HasIndex(b => new { b.MemberId, b.TeeTimeSlotId })
.IsUnique();
</file>

<file path="GolfClubManagerAPI/Data/TeeTimeSlot.cs">
public class TeeTimeSlot
⋮----
// Navigation property to related bookings
</file>

<file path="GolfClubManagerAPI/DTOs/BookingDisplayDTO.cs">
// Update this in both your API and WASM projects
public class BookingDisplayDTO
⋮----
public bool IsSelectedMember { get; set; } = false; // New property to highlight selected member
</file>

<file path="GolfClubManagerWASM/DTOs/BookingDisplayDTO.cs">
// Update this in both your API and WASM projects
public class BookingDisplayDTO
⋮----
public bool IsSelectedMember { get; set; } = false; // New property to highlight selected member
</file>

<file path="GolfClubManagerWASM/Layout/MainLayout.razor">
@inherits LayoutComponentBase

<div class="container-fluid">
    <div class="row">
        <!-- Sidebar -->
        <nav class="col-md-3 col-lg-2 d-md-block sidebar text-white"
             style="background: linear-gradient(180deg, #1e3a5f 0%, #2c7edb 100%);">
            <div class="position-sticky">
                <NavMenu/>
            </div>
        </nav>

        <!-- Main Content -->
        <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="container-fluid">
                    <a class="navbar-brand" href="#">Golf Club Manager</a>
                    <div class="d-flex">
                        <a class="btn btn-outline-primary me-2" href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
                    </div>
                </div>
            </nav>

            <div class="content py-4">
                @Body
            </div>
        </main>
    </div>
</div>
</file>

<file path="GolfClubManagerWASM/Layout/NavMenu.razor">
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Golf Club Manager</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class ="nav-link" href="/members">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Members
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class ="nav-link" href="/bookings">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Bookings
            </NavLink>
        </div>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

}
</file>

<file path="GolfClubManagerWASM/Pages/Home.razor">
@page "/"

<PageTitle>Strawberry Fields Golf Club</PageTitle>

<div class="container py-5">
    <!-- Hero Banner -->
    <div class="row mb-5">
        <div class="col-12">
            <div class="card bg-dark text-white border-0 rounded-lg shadow">
                <div class="card-body p-5" style="background: linear-gradient(rgba(0,0,0,0.6), rgba(0,0,0,0.7)), url('./images/golfcourse.webp') center/cover no-repeat;">
                    <div class="row align-items-center">
                        <div class="col-md-8">
                            <h1 class="display-4 fw-bold mb-3">Welcome to Strawberry Fields Golf Club</h1>
                            <p class="lead mb-4">Where passion for golf meets exceptional service</p>
                            <div class="d-flex gap-3">
                                <a href="/members" class="btn btn-success btn-lg px-4 py-2">
                                    <i class="bi bi-people-fill me-2"></i> Our Members
                                </a>
                                <a href="/bookings" class="btn btn-primary btn-lg px-4 py-2">
                                    <i class="bi bi-calendar-check me-2"></i> Book Tee Time
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Links Section -->
    <div class="row mb-5 gy-4">
        <div class="col-md-4">
            <div class="card h-100 shadow-sm hover-zoom">
                <div class="card-body text-center p-4">
                    <div class="mb-3">
                        <i class="bi bi-calendar-week text-success" style="font-size: 2.5rem;"></i>
                    </div>
                    <h3 class="card-title h4">Book a Tee Time</h3>
                    <p class="card-text">Reserve your spot on our championship course with just a few clicks.</p>
                    <a href="/bookings" class="btn btn-outline-success">Book Now</a>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card h-100 shadow-sm hover-zoom">
                <div class="card-body text-center p-4">
                    <div class="mb-3">
                        <i class="bi bi-people text-primary" style="font-size: 2.5rem;"></i>
                    </div>
                    <h3 class="card-title h4">Membership</h3>
                    <p class="card-text">View and manage club members, track handicaps, and access member services.</p>
                    <a href="/members" class="btn btn-outline-primary">View Members</a>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card h-100 shadow-sm hover-zoom">
                <div class="card-body text-center p-4">
                    <div class="mb-3">
                        <i class="bi bi-info-circle text-info" style="font-size: 2.5rem;"></i>
                    </div>
                    <h3 class="card-title h4">Club Information</h3>
                    <p class="card-text">Learn about our facilities, tournaments, events, and club policies.</p>
                    <button class="btn btn-outline-info" disabled>Coming Soon</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Club Highlights -->
    <div class="row">
        <div class="col-12">
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-body p-4">
                    <h2 class="text-center mb-4">About Strawberry Fields Golf Club</h2>
                    <p class="lead text-center mb-4">
                        Founded in 1985, Strawberry Fields Golf Club has been the premier destination for golf enthusiasts for over 35 years.
                    </p>
                    
                    <div class="row mt-5 gy-4">
                        <div class="col-md-6 col-lg-3">
                            <div class="text-center">
                                <div class="mb-3">
                                    <i class="bi bi-trophy text-warning" style="font-size: 2rem;"></i>
                                </div>
                                <h4>Championship Course</h4>
                                <p>Our 18-hole championship course offers a challenging yet enjoyable experience for golfers of all skill levels.</p>
                            </div>
                        </div>
                        
                        <div class="col-md-6 col-lg-3">
                            <div class="text-center">
                                <div class="mb-3">
                                    <i class="bi bi-person-lines-fill text-success" style="font-size: 2rem;"></i>
                                </div>
                                <h4>Expert Instruction</h4>
                                <p>Our PGA-certified instructors offer private and group lessons to help you improve your game.</p>
                            </div>
                        </div>
                        
                        <div class="col-md-6 col-lg-3">
                            <div class="text-center">
                                <div class="mb-3">
                                    <i class="bi bi-shop text-primary" style="font-size: 2rem;"></i>
                                </div>
                                <h4>Pro Shop</h4>
                                <p>Visit our fully-stocked pro shop for the latest equipment, apparel, and accessories.</p>
                            </div>
                        </div>
                        
                        <div class="col-md-6 col-lg-3">
                            <div class="text-center">
                                <div class="mb-3">
                                    <i class="bi bi-cup-hot text-danger" style="font-size: 2rem;"></i>
                                </div>
                                <h4>Clubhouse</h4>
                                <p>Relax in our elegant clubhouse featuring dining facilities and event spaces.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .hover-zoom {
        transition: transform 0.3s ease;
    }
    
    .hover-zoom:hover {
        transform: translateY(-5px);
    }
</style>
</file>

<file path="GolfClubManagerAPI/Controllers/TeeTimeController.cs">
public class TeeTimeController : ControllerBase
⋮----
private readonly ApplicationDbContext _context;
⋮----
public async Task<ActionResult<IEnumerable<TeeTimeSlotDTO>>> GetTeeTimeSlots(DateTime date)
⋮----
// Ensure we have tee time slots for the requested date range
⋮----
var futureDateLimit = date.AddDays(7); // Extend the search range by 7 days
⋮----
// Query existing slots in the next 7 days
⋮----
.Where(slot => slot.BookingTime.Date >= date.Date && slot.BookingTime.Date <= futureDateLimit.Date) // Show slots in the next 7 days
.Where(slot => !_context.TeeTimeBookings.Any(b => b.TeeTimeSlotId == slot.Id)) // Exclude booked slots
.OrderBy(slot => slot.BookingTime) // Sort by time
.Select(slot => new TeeTimeSlotDTO
⋮----
.ToListAsync();
⋮----
// New method to ensure tee time slots exist
private async Task EnsureTeeTimeSlotsExistAsync(DateTime startDate, int daysToGenerate)
⋮----
// Generate slots from the start date up to the number of days specified
⋮----
var currentDate = startDate.AddDays(day).Date;
⋮----
// Check if we already have slots for this date
⋮----
.AnyAsync(s => s.BookingTime.Date == currentDate);
⋮----
// Create slots for this date
⋮----
await _context.TeeTimeSlots.AddRangeAsync(newSlots);
await _context.SaveChangesAsync();
⋮----
private List<TeeTimeSlot> GenerateTeeTimeSlotsForDate(DateTime date)
⋮----
// Generate tee times from 7:00 AM to 5:00 PM with 15-minute intervals
DateTime startTime = date.Date.AddHours(7); // 7:00 AM
DateTime endTime = date.Date.AddHours(17); // 5:00 PM
⋮----
slots.Add(new TeeTimeSlot
⋮----
startTime = startTime.AddMinutes(15); // 15-minute intervals
</file>

<file path="GolfClubManagerAPI/Data/TeeTimeBooking.cs">
public class TeeTimeBooking
⋮----
public int TeeTimeSlotId { get; set; } // Foreign Key for tee time slot
⋮----
public int MemberId { get; set; } // Foreign Key for member
⋮----
// Navigation properties
</file>

<file path="GolfClubManagerAPI/Program.cs">
var builder = WebApplication.CreateBuilder(args);
⋮----
// Add services to the container.
⋮----
builder.Services.AddCors(options =>
⋮----
options.AddPolicy("AllowBlazorClient",
⋮----
policy.WithOrigins("http://localhost:5158") //
.AllowAnyMethod()
.AllowAnyHeader()
.AllowCredentials();
⋮----
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddControllersWithViews();
builder.Services.AddRazorPages();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
⋮----
options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));
⋮----
var app = builder.Build();
⋮----
// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
⋮----
app.UseSwagger();
app.UseSwaggerUI();
⋮----
app.UseCors("AllowBlazorClient");
⋮----
app.MapControllers();
⋮----
app.MapGet("/weatherforecast", () =>
⋮----
var forecast = Enumerable.Range(1, 5).Select(index =>
new WeatherForecast
⋮----
DateOnly.FromDateTime(DateTime.Now.AddDays(index)),
Random.Shared.Next(-20, 55),
summaries[Random.Shared.Next(summaries.Length)]
⋮----
.ToArray();
⋮----
.WithName("GetWeatherForecast")
.WithOpenApi();
⋮----
app.Run();
</file>

<file path="GolfClubManagerAPI/Data/Member.cs">
public class Member
⋮----
public int MembershipNumber { get; set; } // Integer for auto-increment, no identity attribute
</file>

<file path="GolfClubManagerAPI/Services/MemberService.cs">
// MemberService.cs
⋮----
public class MemberService
⋮----
private readonly ApplicationDbContext _context;
⋮----
// Add a new member
public async Task<Member> AddMemberAsync(Member member)
⋮----
// ✅ Backend Validation: Ensure Name, Email, Gender, and Handicap are valid
if (string.IsNullOrWhiteSpace(member.Name))
throw new ArgumentException("Member name is required.");
⋮----
if (string.IsNullOrWhiteSpace(member.Email) || !new EmailAddressAttribute().IsValid(member.Email))
throw new ArgumentException("Invalid email format.");
⋮----
if (string.IsNullOrWhiteSpace(member.Gender) || (member.Gender != "Male" && member.Gender != "Female" && member.Gender != "Other"))
throw new ArgumentException("Invalid gender. Must be Male, Female, or Other.");
⋮----
throw new ArgumentException("Handicap must be between 0 and 54.");
⋮----
// ✅ Generate MembershipNumber (auto-increment logic)
⋮----
.OrderByDescending(m => m.MembershipNumber)
.FirstOrDefaultAsync();
⋮----
//  Save valid member to the database
_context.Members.Add(member);
await _context.SaveChangesAsync();
⋮----
// Get a member by their ID
public async Task<Member?> GetMemberByIdAsync(int id)
⋮----
.FirstOrDefaultAsync(m => m.Id == id);
⋮----
// Get all members
public async Task<List<MemberDTO>> GetAllMembersAsync(string? gender, string? handicapRange, string? sortBy, string? order)
⋮----
var query = _context.Members.AsQueryable();
⋮----
// 🏷️ Filter by Gender
if (!string.IsNullOrWhiteSpace(gender))
⋮----
query = query.Where(m => m.Gender == gender);
⋮----
// 🎯 Filter by Handicap Range
if (!string.IsNullOrWhiteSpace(handicapRange))
⋮----
query = query.Where(m => m.Handicap < 10);
⋮----
query = query.Where(m => m.Handicap >= 11 && m.Handicap <= 20);
⋮----
query = query.Where(m => m.Handicap > 20);
⋮----
// 🔄 Sorting Logic
⋮----
"Name" => descending ? query.OrderByDescending(m => m.Name) : query.OrderBy(m => m.Name),
"Handicap" => descending ? query.OrderByDescending(m => m.Handicap) : query.OrderBy(m => m.Handicap),
_ => query.OrderBy(m => m.Name) // Default: Sort by Name (asc)
⋮----
return await query.Select(m => new MemberDTO
⋮----
}).ToListAsync();
</file>

<file path="GolfClubManagerWASM/Services/BookingService.cs">
public class BookingService
⋮----
private readonly HttpClient _httpClient;
⋮----
public async Task<List<TeeTimeSlotDTO>> GetAvailableSlotsAsync(DateTime date)
⋮----
var formattedDate = date.ToString("yyyy-MM-dd");
⋮----
Console.WriteLine($" Error fetching available slots: {ex.Message}");
⋮----
public async Task<List<BookingDisplayDTO>> GetBookingsForDateAsync(DateTime date)
⋮----
Console.WriteLine($" BookingService: Getting bookings for date {date:yyyy-MM-dd}");
⋮----
// Use the correct route pattern that matches the controller
⋮----
Console.WriteLine($" Calling API: {url}");
⋮----
Console.WriteLine($" Received {response.Count} bookings from API");
⋮----
Console.WriteLine("️ API returned null response");
⋮----
Console.WriteLine($" Error fetching bookings: {ex.Message}");
⋮----
public async Task<bool> BookTeeTimeAsync(BookingDTO bookingDTO)
⋮----
var response = await _httpClient.PostAsJsonAsync("api/Booking", bookingDTO);
⋮----
Console.WriteLine($" Error booking tee time: {ex.Message}");
⋮----
public async Task<List<MemberDTO>> GetAllMembersAsync()
⋮----
Console.WriteLine($" Error fetching members: {ex.Message}");
⋮----
public async Task<int> AddMemberAsync(PlayerDTO newPlayer)
⋮----
var response = await _httpClient.PostAsJsonAsync("api/Member", newPlayer);
⋮----
Console.WriteLine($" Error adding member: {ex.Message}");
</file>

<file path="GolfClubManagerAPI/Controllers/BookingController.cs">
public class BookingController : ControllerBase
⋮----
private readonly BookingService _bookingService;
⋮----
public async Task<ActionResult> BookTeeTime([FromBody] BookingDTO bookingDTO)
⋮----
var createdBookings = await _bookingService.CreateBookingAsync(bookingDTO);
⋮----
public async Task<ActionResult<IEnumerable<BookingDisplayDTO>>> GetBookingsForDate(DateTime date)
⋮----
var bookings = await _bookingService.GetBookingsForDate(date);
⋮----
public async Task<ActionResult<IEnumerable<BookingDisplayDTO>>> GetBookingsForMember(int memberId, [FromQuery] DateTime? date = null)
⋮----
var bookings = await _bookingService.GetBookingsForMemberAsync(memberId, date);
⋮----
return Ok(new List<BookingDisplayDTO>());  // Return an empty list if none are found
⋮----
public async Task<ActionResult<IEnumerable<BookingDisplayDTO>>> GetAllBookings([FromQuery] DateTime? date = null)
⋮----
var bookings = await _bookingService.GetAllBookingsAsync(date);
</file>

<file path="GolfClubManagerWASM/Pages/Members.razor">
@page "/members"
@using GolfClubManagerWASM.DTOs
@using GolfClubManagerWASM.Models
@inject HttpClient Http
@inject IJSRuntime JS

<h3 class="text-center text-primary">👥 Members</h3>

<!-- Member Form -->
<div class="card shadow-lg p-4 mb-4">
    <h5 class="card-title text-center">➕ Add New Member</h5>
    <EditForm Model="newMember" OnValidSubmit="AddMember">
        <DataAnnotationsValidator />
        <ValidationSummary class="alert alert-danger" />

        <div class="row">
            <div class="col-md-6">
                <label class="form-label fw-bold">Name</label>
                <InputText class="form-control" @bind-Value="newMember.Name" placeholder="Enter full name" />
                <ValidationMessage For="@(() => newMember.Name)" class="text-danger" />
            </div>
            <div class="col-md-6">
                <label class="form-label fw-bold">Email</label>
                <InputText class="form-control" @bind-Value="newMember.Email" placeholder="Enter email" />
                <ValidationMessage For="@(() => newMember.Email)" class="text-danger" />
            </div>
        </div>

        <div class="row mt-3">
            <div class="col-md-4">
                <label class="form-label fw-bold">Handicap</label>
                <InputNumber class="form-control" @bind-Value="newMember.Handicap" />
                <ValidationMessage For="@(() => newMember.Handicap)" class="text-danger" />
            </div>
            <div class="col-md-4">
                <label class="form-label fw-bold">Gender</label>
                <InputSelect class="form-control" @bind-Value="newMember.Gender">
                    <option value="">-- Select Gender --</option>
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                </InputSelect>
                <ValidationMessage For="@(() => newMember.Gender)" class="text-danger" />
            </div>
            <div class="col-md-4 d-flex align-items-end">
                <button type="submit" class="btn btn-success w-100">
                    ✅ Add Member
                </button>
            </div>
        </div>
    </EditForm>
</div>

<!-- 🔎 Filters & Sorting -->
<div class="card shadow-lg p-4 mb-4">
    <h5 class="card-title text-center">🔎 Filter & Sort Members</h5>
    <div class="row">
        <!-- Gender Filter -->
        <div class="col-md-4">
            <label class="form-label fw-bold">Filter by Gender:</label>
            <select class="form-select" @onchange="HandleGenderChange">

            <option value="">All</option>
                <option value="Male">Male</option>
                <option value="Female">Female</option>
            </select>
        </div>

        <!-- Handicap Filter -->
        <div class="col-md-4">
            <label class="form-label fw-bold">Filter by Handicap:</label>
            <select class="form-select" @onchange="HandleHandicapChange">

            <option value="All">All</option>
                <option value="Below10">Below 10</option>
                <option value="Between11And20">Between 11 and 20</option>
                <option value="Above20">Above 20</option>
            </select>
        </div>

        <!-- Sorting -->
        <div class="col-md-4">
            <label class="form-label fw-bold">Sort Members:</label>
            <select class="form-select" @onchange="HandleSortChange">

            <option value="NameAsc">Name (A → Z)</option>
                <option value="NameDesc">Name (Z → A)</option>
                <option value="HandicapAsc">Handicap (Low → High)</option>
                <option value="HandicapDesc">Handicap (High → Low)</option>
            </select>
        </div>
    </div>
</div>

<!-- Members List -->
<div class="card shadow-lg p-4">
    <h5 class="card-title text-center">📋 Member List</h5>

    <table class="table table-striped table-hover text-center">
        <thead class="table-dark">
        <tr>
            <th>Membership #</th>
            <th class="w-25">Name</th>
            <th>Email</th>
            <th>Handicap</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var member in filteredMembers)
        {
            <tr>
                <td>@member.MembershipNumber</td>
                <td>@member.Name</td>
                <td>@member.Email</td>
                <td>@member.Handicap</td>
            </tr>
        }
        </tbody>
    </table>
</div>

@code {
    private List<Member> members = new();
    private List<Member> filteredMembers = new();
    private MemberCreateDTO newMember = new();
    private string errorMessage;

    private string selectedGender = "";
    private string selectedHandicapRange = "All";
    private string selectedSortOption = "NameAsc";

    protected override async Task OnInitializedAsync()
    {
        await FetchMembers();
    }
    
    private void HandleGenderChange(ChangeEventArgs e)
    {
        HandleFilterChange(e, "Gender");
    }
    
    private void HandleHandicapChange(ChangeEventArgs e)
    {
        HandleFilterChange(e, "Handicap");
    }

    private void HandleSortChange(ChangeEventArgs e)
    {
        HandleFilterChange(e, "Sort");
    }


    
    private void HandleFilterChange(ChangeEventArgs e, string filterType)
    {
        string value = e.Value?.ToString() ?? "";

        switch (filterType)
        {
            case "Gender":
                selectedGender = value;
                break;
            case "Handicap":
                selectedHandicapRange = value;
                break;
            case "Sort":
                selectedSortOption = value;
                break;
        }

        ApplyFilters(); // Apply filtering and sorting after the selection change
    }


    private async Task AddMember()
    {
        var response = await Http.PostAsJsonAsync("api/member", newMember);

        if (response.IsSuccessStatusCode)
        {
            var addedMember = await response.Content.ReadFromJsonAsync<Member>();
            members.Add(addedMember);
            newMember = new MemberCreateDTO(); // Reset form after submission
            ApplyFilters();
            await JS.InvokeVoidAsync("showToast", "successToast"); // Show success toast
        }
        else
        {
            errorMessage = " Failed to Add Member";
            await JS.InvokeVoidAsync("showToast", "errorToast"); //  Show error toast
        }
    }

    private async Task FetchMembers()
    {
        members = await Http.GetFromJsonAsync<List<Member>>("api/member");
        ApplyFilters(); // Apply filters immediately after fetching
    }

    private void ApplyFilters()
    {
        filteredMembers = members.Where(m =>
            (string.IsNullOrEmpty(selectedGender) || m.Gender == selectedGender) &&
            (selectedHandicapRange == "All" ||
             (selectedHandicapRange == "Below10" && m.Handicap < 10) ||
             (selectedHandicapRange == "Between11And20" && m.Handicap >= 11 && m.Handicap <= 20) ||
             (selectedHandicapRange == "Above20" && m.Handicap > 20))
        ).ToList();

        // Apply Sorting
        filteredMembers = selectedSortOption switch
        {
            "NameAsc" => filteredMembers.OrderBy(m => m.Name).ToList(),
            "NameDesc" => filteredMembers.OrderByDescending(m => m.Name).ToList(),
            "HandicapAsc" => filteredMembers.OrderBy(m => m.Handicap).ToList(),
            "HandicapDesc" => filteredMembers.OrderByDescending(m => m.Handicap).ToList(),
            _ => filteredMembers
        };

        StateHasChanged();
    }
}
</file>

<file path="GolfClubManagerAPI/Services/BookingService.cs">
public class BookingService
⋮----
private readonly ApplicationDbContext _context;
⋮----
public async Task<List<TeeTimeBooking>> CreateBookingAsync(BookingDTO bookingDTO)
⋮----
Console.WriteLine($" Debug: Checking TeeTimeSlotId = {bookingDTO.TeeTimeSlotId}");
⋮----
var teeTimeSlot = await _context.TeeTimeSlots.FindAsync(bookingDTO.TeeTimeSlotId);
⋮----
Console.WriteLine($" ERROR: Tee Time Slot with ID {bookingDTO.TeeTimeSlotId} not found in DB.");
throw new InvalidOperationException($"Tee Time Slot {bookingDTO.TeeTimeSlotId} not found.");
⋮----
var bookingDate = teeTimeSlot.BookingTime.Date; // Extract the date
⋮----
if (memberId == 0) continue; //  Skip empty member slots
⋮----
.Include(b => b.TeeTimeSlot)
.Where(b => b.MemberId == memberId)
.ToListAsync();
⋮----
// Log all existing bookings
⋮----
Console.WriteLine($"🔍 DEBUG: Member {memberId} already booked on {booking.TeeTimeSlot.BookingTime:yyyy-MM-dd HH:mm}");
⋮----
Console.WriteLine($" Requested Booking Date: {teeTimeSlot.BookingTime:yyyy-MM-dd HH:mm}");
⋮----
//  Check if this member already has a booking on the same day
⋮----
.Select(b => new { BookingDate = b.TeeTimeSlot.BookingTime.Date })
.AnyAsync(b => b.BookingDate == teeTimeSlot.BookingTime.Date);
⋮----
Console.WriteLine($" ERROR: Member {memberId} already booked on {bookingDate}");
throw new InvalidOperationException($"Member {memberId} cannot book more than once per day.");
⋮----
newBookings.Add(new TeeTimeBooking { TeeTimeSlotId = bookingDTO.TeeTimeSlotId, MemberId = memberId });
Console.WriteLine($" Adding booking for MemberId: {memberId} at TeeTimeSlot {bookingDTO.TeeTimeSlotId}");
⋮----
Console.WriteLine(" ERROR: No valid members selected for booking.");
throw new InvalidOperationException("At least one valid member is required to book.");
⋮----
// 🔥 FIX: Disable tracking before saving
foreach (var entry in _context.ChangeTracker.Entries())
⋮----
_context.TeeTimeBookings.AddRange(newBookings);
await _context.SaveChangesAsync();
⋮----
public async Task<List<TeeTimeSlotDTO>> GetAvailableSlotsForDate(DateTime date)
⋮----
.Where(slot => slot.BookingTime.Date == date.Date)
.Select(slot => new TeeTimeSlotDTO
⋮----
public async Task<List<BookingDisplayDTO>> GetBookingsForDate(DateTime date)
⋮----
.Where(b => b.TeeTimeSlot.BookingTime.Date == date.Date)
.Include(b => b.Member)
.Select(b => new BookingDisplayDTO
⋮----
// This goes in your backend BookingService.cs
public async Task<List<BookingDisplayDTO>> GetBookingsForMemberAsync(int memberId, DateTime? date = null)
⋮----
// First, find the tee time slots this member has booked
⋮----
.Where(b => b.MemberId == memberId);
⋮----
// Apply date filter if provided
⋮----
.Where(b => b.TeeTimeSlot.BookingTime.Date == date.Value.Date);
⋮----
// Get the tee time slot IDs this member has booked
⋮----
.Select(b => b.TeeTimeSlotId)
⋮----
Console.WriteLine($"Found {teeTimeSlotIds.Count} tee time slots for member {memberId}");
⋮----
// Now get ALL bookings for these tee time slots (including other members)
⋮----
.Where(b => teeTimeSlotIds.Contains(b.TeeTimeSlotId))
⋮----
Console.WriteLine($"Found {allBookingsForSlots.Count} total bookings across these tee time slots");
⋮----
// Map to DTOs
⋮----
// Flag to highlight the selected member
⋮----
.OrderBy(b => b.BookingTime)
.ThenBy(b => b.MemberName)
.ToList();
⋮----
public async Task<List<BookingDisplayDTO>> GetAllBookingsAsync(DateTime? date = null)
⋮----
query = query.Where(b => b.BookingTime.Date == date.Value.Date);
⋮----
return await query.ToListAsync();
</file>

<file path="GolfClubManagerWASM/Pages/Bookings.razor">
@page "/bookings"
@using GolfClubManagerWASM.DTOs
@using GolfClubManagerWASM.Services
@inject HttpClient Http
@inject BookingService BookingService
@inject IJSRuntime JS

<h3>Book a Tee Time</h3>

<h3 class="text-center text-primary">⛳ Book a Tee Time</h3>

<!-- Add this code right after the "<h3 class="text-center text-primary">⛳ Book a Tee Time</h3>" line -->

<div class="card shadow-lg p-4 mb-4">
    <div class="mb-3">
        <label class="form-label fw-bold">📅 Select Date:</label>
        <input type="date" class="form-control"
               value="@DateTime.Now.ToString("yyyy-MM-dd")"
               min="@DateTime.Now.ToString("yyyy-MM-dd")"
               max="@DateTime.Now.AddDays(30).ToString("yyyy-MM-dd")"
               @onchange="DateChanged" />

        @if (availableSlots.Count == 0)
        {
            <div class="alert alert-warning mt-2">
                No tee times available for the selected date.
            </div>
        }
    </div>
</div>

<div class="card shadow-lg p-4">
    <EditForm Model="bookingFormModel" OnValidSubmit="BookTeeTime">
        <DataAnnotationsValidator />
        <ValidationSummary class="alert alert-danger" />

        <!-- Tee Time Selection -->
        <div class="mb-3">
            <label class="form-label fw-bold">📅 Select Tee Time:</label>
            <select class="form-select" @bind="bookingFormModel.TeeTimeSlotId">
                <option value="0" disabled selected>-- Select a Tee Time --</option>
                @foreach (var slot in availableSlots)
                {
                    <option value="@slot.Id">@slot.BookingTime.ToString("yyyy-MM-dd HH:mm")</option>
                }
            </select>
        </div>

        <!-- Player Selection -->
        <div class="mb-3">
            <label class="form-label fw-bold">👥 Select Players:</label>
            <div class="row">
                @for (int i = 0; i < 4; i++)
                {
                    int capturedIndex = i; // Ensure index is fixed inside this iteration

                    <div class="col-md-6 col-lg-3 mb-2">
                        <label class="form-label">Player @(capturedIndex + 1)</label>
                        <select class="form-select" @onchange="(e) => HandleMemberChange(capturedIndex, e)">
                            <option value="0">Select Member</option>
                            @foreach (var member in availableMembers)
                            {
                                <option value="@member.Id">@member.Name</option>
                            }
                        </select>
                    </div>
                }
            </div>
        </div>

        <!-- Submit Button -->
        <div class="text-center mt-4">
            <button type="submit" class="btn btn-lg btn-success shadow-sm">
                ⛳ Book Tee Time
            </button>
        </div>
    </EditForm>
</div>

<div class="card shadow-lg p-4">
    <h5 class="text-center">🔍 View Bookings for a Member</h5>

    <div class="mb-3">
        <label class="form-label fw-bold">Select Member:</label>
        <select class="form-select" @onchange="HandleMemberSelection">
            <option value="0" selected>All Members</option> <!-- Added "All Members" -->
            @foreach (var member in availableMembers)
            {
                <option value="@member.Id">@member.Name</option>
            }
        </select>
    </div>
</div>

<!-- Display message if no bookings exist -->
@if (selectedMemberId >= 0 && !currentBookings.Any())
{
    <div class="alert alert-warning text-center">
        ❌ No bookings found for the selected option in the next 7 days.
    </div>
}

<h3>Current Bookings</h3>

<table class="table table-bordered">
    <thead class="table-dark">
    <tr>
        <th class="text-center">Date & Time</th>
        <th style="width: 40%;">Players</th>
        <th class="text-center">Handicap</th>
    </tr>
    </thead>
    <tbody>
    @{
        // Group bookings by TeeTimeSlotId to show all members in the same booking group
        var bookingGroups = currentBookings
            .GroupBy(b => b.TeeTimeSlotId)
            .OrderBy(g => g.First().BookingTime);
    }

    @foreach (var group in bookingGroups)
    {
        var firstBooking = group.First();
        var sortedMembers = group.OrderBy(b => !b.IsSelectedMember); // Show selected member first
        var isFirst = true;

        <tr class="table-secondary">
            <th class="text-center align-middle" rowspan="@(group.Count() + 1)">
                <div class="fw-bold">@firstBooking.BookingTime.ToString("dd MMM yyyy")</div>
                <div class="fs-5">@firstBooking.BookingTime.ToString("HH:mm")</div>
            </th>
            <th colspan="2" class="text-center bg-primary text-white">
                <strong>Tee Slot @firstBooking.TeeTimeSlotId</strong>
            </th>
        </tr>

        @foreach (var booking in sortedMembers)
        {
            <tr class="@(booking.IsSelectedMember && selectedMemberId > 0 ? "table-success" : "")">
                <td>
                    @if (booking.IsSelectedMember && selectedMemberId > 0)
                    {
                        <span class="badge bg-success me-2">Selected</span>
                    }
                    @booking.MemberName
                </td>
                <td class="text-center">@booking.Handicap</td>
            </tr>
        }

        <!-- Add a separator between groups -->
        <tr class="bg-light">
            <td colspan="3" style="height: 10px;"></td>
        </tr>
    }
    </tbody>
</table>

@if (!currentBookings.Any())
{
    <div class="alert alert-info text-center">
        No bookings found for the selected criteria.
    </div>
}

@if (!currentBookings.Any())
{
    <div class="alert alert-info text-center">
        No bookings found for the selected criteria.
    </div>
}



<div aria-live="polite" aria-atomic="true" class="position-relative">
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <!--  Success Toast -->
        <div id="successToast" class="toast align-items-center text-bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    ✅ Booking successfully added!
                </div>
                <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>

        <!--  Error Toast -->
        <div id="errorToast" class="toast align-items-center text-bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    ❌ Member cannot book more than once per day!
                </div>
                <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    </div>
</div>


@code {
    private BookingDTO bookingFormModel = new BookingDTO { MemberIds = new List<int> { 0, 0, 0, 0 } };
    private List<TeeTimeSlotDTO> availableSlots = new();
    private List<MemberDTO> availableMembers = new();
    private List<BookingDisplayDTO> currentBookings = new();
    private int selectedMemberId = 0;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("🔹 Initializing Bookings...");

        availableMembers = await BookingService.GetAllMembersAsync() ?? new List<MemberDTO>();
        
        // Get tee slots for today
        await RefreshAvailableSlots(DateTime.Now);
        
        await LoadBookingsForNext7Days();
        
        //Debugging backend for slot retrieval
        Console.WriteLine($" Available members count: {availableMembers.Count}");
        Console.WriteLine($" Available slots count: {availableSlots.Count}");
        Console.WriteLine($" MemberIds before adjustment: {string.Join(", ", bookingFormModel.MemberIds)}");

        // Ensure MemberIds always has 4 elements
        while (bookingFormModel.MemberIds.Count < 4)
        {
            bookingFormModel.MemberIds.Add(0);
        }
        Console.WriteLine($" MemberIds initialized: {string.Join(", ", bookingFormModel.MemberIds)}");

        StateHasChanged();
    }

    private void HandleMemberChange(int index, ChangeEventArgs e)
    {
        if (index < 0 || index >= 4)  // Ensures index is always between 0 and 3
        {
            Console.WriteLine($" ERROR: Invalid index {index}, must be 0-3.");
            return;
        }

        if (bookingFormModel.MemberIds.Count < 4) // Refill if list is unexpectedly too short
        {
            while (bookingFormModel.MemberIds.Count < 4)
            {
                bookingFormModel.MemberIds.Add(0);
            }
            Console.WriteLine($"🔄 Adjusted MemberIds: {string.Join(", ", bookingFormModel.MemberIds)}");
        }

        if (int.TryParse(e.Value.ToString(), out int selectedMemberId))
        {
            Console.WriteLine($" Changing MemberIds[{index}] to {selectedMemberId}");
            bookingFormModel.MemberIds[index] = selectedMemberId;
        }
        else
        {
            Console.WriteLine($" ERROR: Invalid selection value {e.Value}");
        }
    }
    
    private async Task LoadBookingsForNext7Days()
    {
        Console.WriteLine("📅 Loading bookings for the next 7 days...");
        currentBookings.Clear();

        try 
        {
            for (int i = 0; i < 7; i++)
            {
                var date = DateTime.Now.AddDays(i);
                var formattedDate = date.ToString("yyyy-MM-dd");
                Console.WriteLine($" Fetching bookings for date: {formattedDate}");
            
                // Use the correct endpoint with the proper route pattern
                var url = $"api/Booking/bookingsForDate/{formattedDate}";
                var bookingsForDay = await Http.GetFromJsonAsync<List<BookingDisplayDTO>>(url) ?? new List<BookingDisplayDTO>();
            
                if (bookingsForDay.Any())
                {
                    Console.WriteLine($" Found {bookingsForDay.Count} bookings for {formattedDate}");
                    currentBookings.AddRange(bookingsForDay);
                }
                else
                {
                    Console.WriteLine($" No bookings found for {formattedDate}");
                }
            }
        
            // Log the total number of bookings loaded
            Console.WriteLine($"📊 Total bookings loaded: {currentBookings.Count}");
        
            // Sort the bookings by date/time for better display
            currentBookings = currentBookings
                .OrderBy(b => b.BookingTime)
                .ToList();
        
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($" Error loading bookings: {ex.Message}");
        }
    }


    private async Task BookTeeTime()
    {
        Console.WriteLine($" Attempting to book tee time for members: {string.Join(", ", bookingFormModel.MemberIds)}");
    
        // Check for invalid indices before looping
        for (int i = 0; i < 4; i++)  
        {
            if (i >= bookingFormModel.MemberIds.Count)
            {
                Console.WriteLine($" ERROR: Index {i} is out of range! Current MemberIds: {string.Join(", ", bookingFormModel.MemberIds)}");
                return;  // Prevents the function from proceeding with a broken state
            }
            else
            {
                Console.WriteLine($" Accessing MemberIds[{i}] = {bookingFormModel.MemberIds[i]}");
            }
        }
    
        var success = await BookingService.BookTeeTimeAsync(bookingFormModel);
        if (success)
        {
            Console.WriteLine(" Booking successful!");
            await JS.InvokeVoidAsync("showToast", "successToast"); // Show success toast
        
            // Reload ALL bookings for the next 7 days, not just today's bookings
            await LoadBookingsForNext7Days();
        
            // Reset the booking form
            bookingFormModel = new BookingDTO { MemberIds = new List<int> { 0, 0, 0, 0 } };
        
            // Refresh available slots for the current date to hide booked slots
            if (availableSlots.Any())
            {
                // Get date from the first available slot to refresh the same date
                var currentDate = availableSlots.First().BookingTime.Date;
                await RefreshAvailableSlots(currentDate);
            }
            else
            {
                await RefreshAvailableSlots(DateTime.Now);
            }
        }
        else
        {   
            Console.WriteLine(" Booking failed. Please try again.");
            await JS.InvokeVoidAsync("showToast", "errorToast"); // Show error toast
        }
    }
    
    private async Task HandleMemberSelection(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int memberId))
        {
            selectedMemberId = memberId;
            Console.WriteLine($" Member selection changed to: {(selectedMemberId == 0 ? "All Members" : $"Member ID {selectedMemberId}")}");

            await FetchBookingsForMember();
        }
    }

    private async Task FetchBookingsForMember()
{
    Console.WriteLine($" Fetching bookings for {(selectedMemberId == 0 ? "All Members" : $"Member ID {selectedMemberId}")}");

    try
    {
        currentBookings.Clear();

        for (int i = 0; i < 7; i++)  // Loop for the next 7 days
        {
            var date = DateTime.Now.AddDays(i);
            var formattedDate = date.ToString("yyyy-MM-dd");
            Console.WriteLine($" Checking date: {formattedDate}");
            
            List<BookingDisplayDTO> bookingsForDay;
            
            if (selectedMemberId == 0) 
            {
                // Use the correct endpoint for all bookings
                var url = $"api/booking/all?date={formattedDate}";
                Console.WriteLine($"🔍 Calling: {url}");
                bookingsForDay = await Http.GetFromJsonAsync<List<BookingDisplayDTO>>(url) ?? new List<BookingDisplayDTO>();
            }
            else 
            {
                // Use the correct endpoint for member bookings
                var url = $"api/booking/member/{selectedMemberId}?date={formattedDate}";
                Console.WriteLine($"🔍 Calling: {url}");
                bookingsForDay = await Http.GetFromJsonAsync<List<BookingDisplayDTO>>(url) ?? new List<BookingDisplayDTO>();
            }
            
            if (bookingsForDay.Any())
            {
                Console.WriteLine($" Found {bookingsForDay.Count} bookings for {formattedDate}");
                currentBookings.AddRange(bookingsForDay);
            }
            else
            {
                Console.WriteLine($"ℹ️ No bookings found for {formattedDate}");
            }
        }
        
        // Sort the bookings by date/time
        currentBookings = currentBookings
            .OrderBy(b => b.BookingTime)
            .ToList();
            
        Console.WriteLine($" Total bookings loaded: {currentBookings.Count}");
        
        // Ensure UI updates
        StateHasChanged();
    }
    catch (Exception ex)
    {
        Console.WriteLine($" Error fetching bookings: {ex.Message}");
    }
}
    
    

    // New method to refresh available slots for a given date
    private async Task RefreshAvailableSlots(DateTime date)
    {
        Console.WriteLine($" Refreshing available slots for date: {date:yyyy-MM-dd}");
        availableSlots = await BookingService.GetAvailableSlotsAsync(date) ?? new List<TeeTimeSlotDTO>();
        
        if (availableSlots.Count == 0)
        {
            Console.WriteLine(" No slots available for the selected date");
        }
        else
        {
            Console.WriteLine($" Found {availableSlots.Count} available slots");
        }
    }

    // Add a DateChanged event handler for a new date selector
    private async Task DateChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value.ToString(), out DateTime selectedDate))
        {
            Console.WriteLine($" Date selection changed to: {selectedDate:yyyy-MM-dd}");
            await RefreshAvailableSlots(selectedDate);
        }
    }
    
}
</file>

</files>
