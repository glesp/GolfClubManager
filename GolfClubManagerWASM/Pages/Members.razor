@page "/members"
@using GolfClubManagerWASM.DTOs
@using GolfClubManagerWASM.Models
@inject HttpClient Http
@inject IJSRuntime JS

<h3 class="text-center text-primary">üë• Members</h3>

<!-- Member Form -->
<div class="card shadow-lg p-4 mb-4">
    <h5 class="card-title text-center">‚ûï Add New Member</h5>
    <EditForm Model="newMember" OnValidSubmit="AddMember">
        <DataAnnotationsValidator />
        <ValidationSummary class="alert alert-danger" />

        <div class="row">
            <div class="col-md-6">
                <label class="form-label fw-bold">Name</label>
                <InputText class="form-control" @bind-Value="newMember.Name" placeholder="Enter full name" />
                <ValidationMessage For="@(() => newMember.Name)" class="text-danger" />
            </div>
            <div class="col-md-6">
                <label class="form-label fw-bold">Email</label>
                <InputText class="form-control" @bind-Value="newMember.Email" placeholder="Enter email" />
                <ValidationMessage For="@(() => newMember.Email)" class="text-danger" />
            </div>
        </div>

        <div class="row mt-3">
            <div class="col-md-4">
                <label class="form-label fw-bold">Handicap</label>
                <InputNumber class="form-control" @bind-Value="newMember.Handicap" />
                <ValidationMessage For="@(() => newMember.Handicap)" class="text-danger" />
            </div>
            <div class="col-md-4">
                <label class="form-label fw-bold">Gender</label>
                <InputSelect class="form-control" @bind-Value="newMember.Gender">
                    <option value="">-- Select Gender --</option>
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                </InputSelect>
                <ValidationMessage For="@(() => newMember.Gender)" class="text-danger" />
            </div>
            <div class="col-md-4 d-flex align-items-end">
                <button type="submit" class="btn btn-success w-100">
                    ‚úÖ Add Member
                </button>
            </div>
        </div>
    </EditForm>

    <div aria-live="polite" aria-atomic="true" class="position-relative">
        <div class="toast-container position-fixed bottom-0 end-0 p-3">
            <!-- ‚úÖ Success Toast -->
            <div id="successToast" class="toast align-items-center text-bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="d-flex">
                    <div class="toast-body">
                        ‚úÖ Member successfully added!
                    </div>
                    <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            </div>

            <!-- ‚ùå Error Toast -->
            <div id="errorToast" class="toast align-items-center text-bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="d-flex">
                    <div class="toast-body">
                        ‚ùå Error: Could not add member. Please check inputs.
                    </div>
                    <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            </div>
        </div>
    </div>



    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3 text-center">@errorMessage</div>
    }
</div>

<!-- Members List -->
<div class="card shadow-lg p-4">
    <h5 class="card-title text-center">üìã Member List</h5>

    <table class="table table-striped table-hover text-center">
        <thead class="table-dark">
        <tr>
            <th>Membership #</th>
            <th class="w-25">Name</th>
            <th>Email</th>
            <th>Handicap</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var member in members)
        {
            <tr>
                <td>@member.MembershipNumber</td>
                <td>@member.Name</td>
                <td>@member.Email</td>
                <td>@member.Handicap</td>
            </tr>
        }
        </tbody>
    </table>

    @* <div class="text-center"> *@
    @*     <button class="btn btn-primary shadow-sm mt-2" @onclick="FetchMembers"> *@
    @*         üîÑ Load Members *@
    @*     </button> *@
    @* </div> *@
</div>

@code {
    private List<Member> members = new();
    private MemberCreateDTO newMember = new();
    private string errorMessage;
    
    protected override async Task OnInitializedAsync()
    {
        await FetchMembers(); 
    }

    private async Task AddMember()
    {
        var response = await Http.PostAsJsonAsync("api/member", newMember);

        if (response.IsSuccessStatusCode)
        {
            var addedMember = await response.Content.ReadFromJsonAsync<Member>();
            members.Add(addedMember);
            newMember = new MemberCreateDTO(); // Reset form after submission
            
            // ‚úÖ Show success toast
            await JS.InvokeVoidAsync("showToast", "successToast");
        }
        else
        {
            errorMessage = "‚ùå Failed to Add Member";
            
            // ‚ùå Show error toast
            await JS.InvokeVoidAsync("showToast", "errorToast");
        }
    }

    private async Task FetchMembers()
    {
        members = await Http.GetFromJsonAsync<List<Member>>("api/member");
    }
}
