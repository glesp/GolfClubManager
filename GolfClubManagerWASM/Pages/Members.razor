@page "/members"
@using GolfClubManagerWASM.DTOs
@using GolfClubManagerWASM.Models
@inject HttpClient Http
@inject IJSRuntime JS

<h3 class="text-center text-primary">üë• Members</h3>

<!-- Member Form -->
<div class="card shadow-lg p-4 mb-4">
    <h5 class="card-title text-center">‚ûï Add New Member</h5>
    <EditForm Model="newMember" OnValidSubmit="AddMember">
        <DataAnnotationsValidator />
        <ValidationSummary class="alert alert-danger" />

        <div class="row">
            <div class="col-md-6">
                <label class="form-label fw-bold">Name</label>
                <InputText class="form-control" @bind-Value="newMember.Name" placeholder="Enter full name" />
                <ValidationMessage For="@(() => newMember.Name)" class="text-danger" />
            </div>
            <div class="col-md-6">
                <label class="form-label fw-bold">Email</label>
                <InputText class="form-control" @bind-Value="newMember.Email" placeholder="Enter email" />
                <ValidationMessage For="@(() => newMember.Email)" class="text-danger" />
            </div>
        </div>

        <div class="row mt-3">
            <div class="col-md-4">
                <label class="form-label fw-bold">Handicap</label>
                <InputNumber class="form-control" @bind-Value="newMember.Handicap" />
                <ValidationMessage For="@(() => newMember.Handicap)" class="text-danger" />
            </div>
            <div class="col-md-4">
                <label class="form-label fw-bold">Gender</label>
                <InputSelect class="form-control" @bind-Value="newMember.Gender">
                    <option value="">-- Select Gender --</option>
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                </InputSelect>
                <ValidationMessage For="@(() => newMember.Gender)" class="text-danger" />
            </div>
            <div class="col-md-4 d-flex align-items-end">
                <button type="submit" class="btn btn-success w-100">
                    ‚úÖ Add Member
                </button>
            </div>
        </div>
    </EditForm>
</div>

<!-- üîé Filters & Sorting -->
<div class="card shadow-lg p-4 mb-4">
    <h5 class="card-title text-center">üîé Filter & Sort Members</h5>
    <div class="row">
        <!-- Gender Filter -->
        <div class="col-md-4">
            <label class="form-label fw-bold">Filter by Gender:</label>
            <select class="form-select" @onchange="HandleGenderChange">

            <option value="">All</option>
                <option value="Male">Male</option>
                <option value="Female">Female</option>
            </select>
        </div>

        <!-- Handicap Filter -->
        <div class="col-md-4">
            <label class="form-label fw-bold">Filter by Handicap:</label>
            <select class="form-select" @onchange="HandleHandicapChange">

            <option value="All">All</option>
                <option value="Below10">Below 10</option>
                <option value="Between11And20">Between 11 and 20</option>
                <option value="Above20">Above 20</option>
            </select>
        </div>

        <!-- Sorting -->
        <div class="col-md-4">
            <label class="form-label fw-bold">Sort Members:</label>
            <select class="form-select" @onchange="HandleSortChange">

            <option value="NameAsc">Name (A ‚Üí Z)</option>
                <option value="NameDesc">Name (Z ‚Üí A)</option>
                <option value="HandicapAsc">Handicap (Low ‚Üí High)</option>
                <option value="HandicapDesc">Handicap (High ‚Üí Low)</option>
            </select>
        </div>
    </div>
</div>

<!-- Members List -->
<div class="card shadow-lg p-4">
    <h5 class="card-title text-center">üìã Member List</h5>

    <table class="table table-striped table-hover text-center">
        <thead class="table-dark">
        <tr>
            <th>Membership #</th>
            <th class="w-25">Name</th>
            <th>Email</th>
            <th>Handicap</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var member in filteredMembers)
        {
            <tr>
                <td>@member.MembershipNumber</td>
                <td>@member.Name</td>
                <td>@member.Email</td>
                <td>@member.Handicap</td>
            </tr>
        }
        </tbody>
    </table>
</div>

@code {
    private List<Member> members = new();
    private List<Member> filteredMembers = new();
    private MemberCreateDTO newMember = new();
    private string errorMessage;

    private string selectedGender = "";
    private string selectedHandicapRange = "All";
    private string selectedSortOption = "NameAsc";

    protected override async Task OnInitializedAsync()
    {
        await FetchMembers();
    }
    
    private void HandleGenderChange(ChangeEventArgs e)
    {
        HandleFilterChange(e, "Gender");
    }
    
    private void HandleHandicapChange(ChangeEventArgs e)
    {
        HandleFilterChange(e, "Handicap");
    }

    private void HandleSortChange(ChangeEventArgs e)
    {
        HandleFilterChange(e, "Sort");
    }


    
    private void HandleFilterChange(ChangeEventArgs e, string filterType)
    {
        string value = e.Value?.ToString() ?? "";

        switch (filterType)
        {
            case "Gender":
                selectedGender = value;
                break;
            case "Handicap":
                selectedHandicapRange = value;
                break;
            case "Sort":
                selectedSortOption = value;
                break;
        }

        ApplyFilters(); // Apply filtering and sorting after the selection change
    }


    private async Task AddMember()
    {
        var response = await Http.PostAsJsonAsync("api/member", newMember);

        if (response.IsSuccessStatusCode)
        {
            var addedMember = await response.Content.ReadFromJsonAsync<Member>();
            members.Add(addedMember);
            newMember = new MemberCreateDTO(); // Reset form after submission
            ApplyFilters();
            await JS.InvokeVoidAsync("showToast", "successToast"); // ‚úÖ Show success toast
        }
        else
        {
            errorMessage = "‚ùå Failed to Add Member";
            await JS.InvokeVoidAsync("showToast", "errorToast"); // ‚ùå Show error toast
        }
    }

    private async Task FetchMembers()
    {
        members = await Http.GetFromJsonAsync<List<Member>>("api/member");
        ApplyFilters(); // Apply filters immediately after fetching
    }

    private void ApplyFilters()
    {
        filteredMembers = members.Where(m =>
            (string.IsNullOrEmpty(selectedGender) || m.Gender == selectedGender) &&
            (selectedHandicapRange == "All" ||
             (selectedHandicapRange == "Below10" && m.Handicap < 10) ||
             (selectedHandicapRange == "Between11And20" && m.Handicap >= 11 && m.Handicap <= 20) ||
             (selectedHandicapRange == "Above20" && m.Handicap > 20))
        ).ToList();

        // Apply Sorting
        filteredMembers = selectedSortOption switch
        {
            "NameAsc" => filteredMembers.OrderBy(m => m.Name).ToList(),
            "NameDesc" => filteredMembers.OrderByDescending(m => m.Name).ToList(),
            "HandicapAsc" => filteredMembers.OrderBy(m => m.Handicap).ToList(),
            "HandicapDesc" => filteredMembers.OrderByDescending(m => m.Handicap).ToList(),
            _ => filteredMembers
        };

        StateHasChanged();
    }
}
