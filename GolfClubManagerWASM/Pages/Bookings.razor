// Bookings.razor (Frontend UI for Booking Tee Times)

@page "/bookings"
@using GolfClubManagerWASM.DTOs
@using GolfClubManagerWASM.Services
@inject HttpClient Http
@inject BookingService BookingService

<h3>Book a Tee Time</h3>

<EditForm Model="bookingFormModel" OnValidSubmit="BookTeeTime">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="FirstName">First Name</label>
        <InputText id="FirstName" class="form-control" @bind-Value="bookingFormModel.FirstName" />
    </div>

    <div class="form-group">
        <label for="LastName">Last Name</label>
        <InputText id="LastName" class="form-control" @bind-Value="bookingFormModel.LastName" />
    </div>

    <div class="form-group">
        <label for="TeeTimeSlotId">Select a Time Slot</label>
        <InputSelect id="TeeTimeSlotId" class="form-control" @bind-Value="bookingFormModel.TeeTimeSlotId">
            @foreach (var slot in availableSlots)
            {
                <option value="@slot.Id">@slot.BookingTime.ToString("yyyy-MM-dd HH:mm")</option>
            }
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-primary">Book Tee Time</button>
</EditForm>

<h3>Current Bookings</h3>

<table class="table">
    <thead>
        <tr>
            <th>Booking Time</th>
            <th>Member Name</th>
            <th>Slot</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var booking in currentBookings)
        {
            <tr>
                <td>@booking.BookingTime.ToString("yyyy-MM-dd HH:mm")</td>
                <td>@booking.MemberName</td>
                <td>@booking.TeeTimeSlotId</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private BookingDTO bookingFormModel = new BookingDTO();
    private List<TeeTimeSlotDTO> availableSlots = new List<TeeTimeSlotDTO>();
    private List<BookingDisplayDTO> currentBookings = new List<BookingDisplayDTO>();

    protected override async Task OnInitializedAsync()
    {
        var selectedDate = DateTime.Now;
        availableSlots = await BookingService.GetAvailableSlotsAsync(selectedDate);
        currentBookings = await BookingService.GetBookingsForDateAsync(selectedDate);
    }

    private async Task BookTeeTime()
    {
        var success = await BookingService.BookTeeTimeAsync(bookingFormModel);
        if (success)
        {
            currentBookings = await BookingService.GetBookingsForDateAsync(DateTime.Now);
            bookingFormModel = new BookingDTO(); // Reset form after success
        }
        else
        {
            Console.WriteLine("Booking failed. Please try again.");
        }
    }
}
