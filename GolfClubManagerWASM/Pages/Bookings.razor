@page "/bookings"
@using GolfClubManagerWASM.DTOs
@using GolfClubManagerWASM.Services
@inject HttpClient Http
@inject BookingService BookingService
@inject IJSRuntime JS

<h3>Book a Tee Time</h3>

<h3 class="text-center text-primary">‚õ≥ Book a Tee Time</h3>

<div class="card shadow-lg p-4">
    <EditForm Model="bookingFormModel" OnValidSubmit="BookTeeTime">
        <DataAnnotationsValidator />
        <ValidationSummary class="alert alert-danger" />

        <!-- Tee Time Selection -->
        <div class="mb-3">
            <label class="form-label fw-bold">üìÖ Select Tee Time:</label>
            <select class="form-select" @bind="bookingFormModel.TeeTimeSlotId">
                <option value="0" disabled selected>-- Select a Tee Time --</option>
                @foreach (var slot in availableSlots)
                {
                    <option value="@slot.Id">@slot.BookingTime.ToString("yyyy-MM-dd HH:mm")</option>
                }
            </select>
        </div>

        <!-- Player Selection -->
        <div class="mb-3">
            <label class="form-label fw-bold">üë• Select Players:</label>
            <div class="row">
                @for (int i = 0; i < 4; i++)
                {
                    int capturedIndex = i; // Ensure index is fixed inside this iteration

                    <div class="col-md-6 col-lg-3 mb-2">
                        <label class="form-label">Player @(capturedIndex + 1)</label>
                        <select class="form-select" @onchange="(e) => HandleMemberChange(capturedIndex, e)">
                            <option value="0">Select Member</option>
                            @foreach (var member in availableMembers)
                            {
                                <option value="@member.Id">@member.Name</option>
                            }
                        </select>
                    </div>
                }
            </div>
        </div>

        <!-- Submit Button -->
        <div class="text-center mt-4">
            <button type="submit" class="btn btn-lg btn-success shadow-sm">
                ‚õ≥ Book Tee Time
            </button>
        </div>
    </EditForm>
</div>

<div class="card shadow-lg p-4">
    <h5 class="text-center">üîç View Bookings for a Member</h5>

    <div class="mb-3">
        <label class="form-label fw-bold">Select Member:</label>
        <select class="form-select" @onchange="HandleMemberSelection">
            <option value="0" disabled selected>-- Select Member --</option>
            @foreach (var member in availableMembers)
            {
                <option value="@member.Id">@member.Name</option>
            }
        </select>
    </div>
</div>

<!-- Display message if no bookings exist -->
@if (selectedMemberId > 0 && !currentBookings.Any())
{
    <div class="alert alert-warning text-center">
        ‚ùå No bookings found for this member in the next 7 days.
    </div>
}





<h3>Current Bookings</h3>

<table class="table table-bordered table-hover">
    <thead class="table-dark">
    <tr>
        <th class="text-center">Date</th>
        <th class="text-center">Time</th>
        <th style="width: 40%;">Member Name</th> @* Wider column for names *@
        @* <th class="text-center">Slot</th> *@
        <th class="text-center">Handicap</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var group in currentBookings.GroupBy(b => b.TeeTimeSlotId))
    {
        @foreach (var booking in group)
        {
            <tr>
                <td class="text-center">@booking.BookingTime.ToString("dd-MM-yyyy")</td>
                <td class="text-center">@booking.BookingTime.ToString("HH:mm")</td>
                <td>@booking.MemberName</td>
                @* <td class="text-center">@booking.TeeTimeSlotId</td> *@
                <td class="text-center">@booking.Handicap</td>
            </tr>
        }
        <!-- Optional separator for groups -->
        <tr class="table-secondary">
            <td colspan="5"></td>
        </tr>
    }
    </tbody>
</table>



<div aria-live="polite" aria-atomic="true" class="position-relative">
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <!-- ‚úÖ Success Toast -->
        <div id="successToast" class="toast align-items-center text-bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    ‚úÖ Booking successfully added!
                </div>
                <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>

        <!-- ‚ùå Error Toast -->
        <div id="errorToast" class="toast align-items-center text-bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    ‚ùå Member cannot book more than once per day!
                </div>
                <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    </div>
</div>


@code {
    private BookingDTO bookingFormModel = new BookingDTO { MemberIds = new List<int> { 0, 0, 0, 0 } };
    private List<TeeTimeSlotDTO> availableSlots = new();
    private List<MemberDTO> availableMembers = new();
    private List<BookingDisplayDTO> currentBookings = new();
    private int selectedMemberId = 0;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("üîπ Initializing Bookings...");

        availableMembers = await BookingService.GetAllMembersAsync() ?? new List<MemberDTO>();
        availableSlots = await BookingService.GetAvailableSlotsAsync(DateTime.Now) ?? new List<TeeTimeSlotDTO>();
        await LoadBookingsForNext7Days();

        Console.WriteLine($"‚úÖ Available members count: {availableMembers.Count}");
        Console.WriteLine($"‚úÖ Available slots count: {availableSlots.Count}");
        Console.WriteLine($"üîπ MemberIds before adjustment: {string.Join(", ", bookingFormModel.MemberIds)}");

        // Ensure MemberIds always has 4 elements
        while (bookingFormModel.MemberIds.Count < 4)
        {
            bookingFormModel.MemberIds.Add(0);
        }
        Console.WriteLine($"‚úÖ MemberIds initialized: {string.Join(", ", bookingFormModel.MemberIds)}");

        StateHasChanged();
    }

    private void HandleMemberChange(int index, ChangeEventArgs e)
    {
        if (index < 0 || index >= 4)  // Ensures index is always between 0 and 3
        {
            Console.WriteLine($"‚ùå ERROR: Invalid index {index}, must be 0-3.");
            return;
        }

        if (bookingFormModel.MemberIds.Count < 4) // Refill if list is unexpectedly too short
        {
            while (bookingFormModel.MemberIds.Count < 4)
            {
                bookingFormModel.MemberIds.Add(0);
            }
            Console.WriteLine($"üîÑ Adjusted MemberIds: {string.Join(", ", bookingFormModel.MemberIds)}");
        }

        if (int.TryParse(e.Value.ToString(), out int selectedMemberId))
        {
            Console.WriteLine($"‚úÖ Changing MemberIds[{index}] to {selectedMemberId}");
            bookingFormModel.MemberIds[index] = selectedMemberId;
        }
        else
        {
            Console.WriteLine($"‚ùå ERROR: Invalid selection value {e.Value}");
        }
    }
    
    private async Task LoadBookingsForNext7Days()
    {
        currentBookings.Clear();

        for (int i = 0; i < 7; i++)
        {
            var date = DateTime.Now.AddDays(i);
            var bookingsForDay = await BookingService.GetBookingsForDateAsync(date);
        
            if (bookingsForDay != null)
            {
                currentBookings.AddRange(bookingsForDay);
            }
        }
    }



    private async Task BookTeeTime()
    {
        Console.WriteLine($"üìå Attempting to book tee time for members: {string.Join(", ", bookingFormModel.MemberIds)}");
        
        
        // Check for invalid indices before looping
        for (int i = 0; i < 4; i++)  
        {
            if (i >= bookingFormModel.MemberIds.Count)
            {
                Console.WriteLine($"‚ùå ERROR: Index {i} is out of range! Current MemberIds: {string.Join(", ", bookingFormModel.MemberIds)}");
                return;  // Prevents the function from proceeding with a broken state
            }
            else
            {
                Console.WriteLine($"‚úÖ Accessing MemberIds[{i}] = {bookingFormModel.MemberIds[i]}");
            }
        }
        
        var success = await BookingService.BookTeeTimeAsync(bookingFormModel);
        if (success)
        {
            Console.WriteLine("‚úÖ Booking successful!");
            await JS.InvokeVoidAsync("showToast", "successToast"); // ‚úÖ Calls site.js function to show a success toast
            currentBookings = await BookingService.GetBookingsForDateAsync(DateTime.Now);
            bookingFormModel = new BookingDTO { MemberIds = new List<int> { 0, 0, 0, 0 } };
        }
        else
        {   
            Console.WriteLine("‚ùå Booking failed. Please try again.");
            await JS.InvokeVoidAsync("showToast", "errorToast"); // ‚ùå Calls site.js function to show an error toast
        }
    }
    
    private async Task HandleMemberSelection(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int memberId))
        {
            selectedMemberId = memberId;
            Console.WriteLine($"üìå Member selected: {selectedMemberId}");

            await FetchBookingsForMember();
        }
    }

    private async Task FetchBookingsForMember()
    {
        if (selectedMemberId == 0)
        {
            Console.WriteLine("‚ùå No member selected.");
            return;
        }

        Console.WriteLine($"üìå Fetching bookings for Member ID: {selectedMemberId}");

        currentBookings.Clear();

        for (int i = 0; i < 7; i++)  // Loop for the next 7 days
        {
            var date = DateTime.Now.AddDays(i);
            var bookingsForDay = await Http.GetFromJsonAsync<List<BookingDisplayDTO>>($"api/booking/member/{selectedMemberId}?date={date:yyyy-MM-dd}")
                                 ?? new List<BookingDisplayDTO>();

            currentBookings.AddRange(bookingsForDay);
        }

        // Ensure UI updates
        StateHasChanged();
    }
    
}
