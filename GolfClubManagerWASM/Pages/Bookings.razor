@page "/bookings"
@using GolfClubManagerWASM.DTOs
@using GolfClubManagerWASM.Services
@inject HttpClient Http
@inject BookingService BookingService
@inject IJSRuntime JS

<h3>Book a Tee Time</h3>

<EditForm Model="bookingFormModel" OnValidSubmit="BookTeeTime">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Select Tee Time:</label>
        <select @bind="bookingFormModel.TeeTimeSlotId">
            <option value="0" disabled selected>-- Select a Tee Time --</option>
            @foreach (var slot in availableSlots)
            {
                <option value="@slot.Id">@slot.BookingTime.ToString("yyyy-MM-dd HH:mm")</option>
            }
        </select>
    </div>

    <div>
        <label>Select Players:</label>
        @for (int i = 0; i < 4; i++)
        {
            int capturedIndex = i; // Ensure index is fixed inside this iteration

            <div>
                <label>Player @(capturedIndex + 1)</label>
                <select class="form-control" @onchange="(e) => HandleMemberChange(capturedIndex, e)">
                    <option value="0">Select Member</option>
                    @foreach (var member in availableMembers)
                    {
                        <option value="@member.Id">@member.Name</option>
                    }
                </select>
            </div>
        }




    </div>

    <button type="submit" class="btn btn-primary">Book Tee Time</button>
</EditForm>

<h3>Current Bookings</h3>

<table class="table">
    <thead>
    <tr>
        <th>Booking Time</th>
        <th>Member Name</th>
        <th>Slot</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var booking in currentBookings)
    {
        <tr>
            <td>@booking.BookingTime.ToString("yyyy-MM-dd HH:mm")</td>
            <td>@booking.MemberName</td>
            <td>@booking.TeeTimeSlotId</td>
        </tr>
    }
    </tbody>
</table>

<div aria-live="polite" aria-atomic="true" class="position-relative">
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <!-- ‚úÖ Success Toast -->
        <div id="successToast" class="toast align-items-center text-bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    ‚úÖ Booking successfully added!
                </div>
                <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>

        <!-- ‚ùå Error Toast -->
        <div id="errorToast" class="toast align-items-center text-bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    ‚ùå Member cannot book more than once per day!
                </div>
                <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    </div>
</div>


@code {
    private BookingDTO bookingFormModel = new BookingDTO { MemberIds = new List<int> { 0, 0, 0, 0 } };
    private List<TeeTimeSlotDTO> availableSlots = new();
    private List<MemberDTO> availableMembers = new();
    private List<BookingDisplayDTO> currentBookings = new();

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("üîπ Initializing Bookings...");

        availableMembers = await BookingService.GetAllMembersAsync() ?? new List<MemberDTO>();
        availableSlots = await BookingService.GetAvailableSlotsAsync(DateTime.Now) ?? new List<TeeTimeSlotDTO>();
        currentBookings = await BookingService.GetBookingsForDateAsync(DateTime.Now) ?? new List<BookingDisplayDTO>();

        Console.WriteLine($"‚úÖ Available members count: {availableMembers.Count}");
        Console.WriteLine($"‚úÖ Available slots count: {availableSlots.Count}");
        Console.WriteLine($"‚úÖ Current bookings count: {currentBookings.Count}");
        Console.WriteLine($"üîπ MemberIds before adjustment: {string.Join(", ", bookingFormModel.MemberIds)}");

        // Ensure MemberIds always has 4 elements
        while (bookingFormModel.MemberIds.Count < 4)
        {
            bookingFormModel.MemberIds.Add(0);
        }
        Console.WriteLine($"‚úÖ MemberIds initialized: {string.Join(", ", bookingFormModel.MemberIds)}");

        StateHasChanged();
    }

    private void HandleMemberChange(int index, ChangeEventArgs e)
    {
        if (index < 0 || index >= 4)  // Ensures index is always between 0 and 3
        {
            Console.WriteLine($"‚ùå ERROR: Invalid index {index}, must be 0-3.");
            return;
        }

        if (bookingFormModel.MemberIds.Count < 4) // Refill if list is unexpectedly too short
        {
            while (bookingFormModel.MemberIds.Count < 4)
            {
                bookingFormModel.MemberIds.Add(0);
            }
            Console.WriteLine($"üîÑ Adjusted MemberIds: {string.Join(", ", bookingFormModel.MemberIds)}");
        }

        if (int.TryParse(e.Value.ToString(), out int selectedMemberId))
        {
            Console.WriteLine($"‚úÖ Changing MemberIds[{index}] to {selectedMemberId}");
            bookingFormModel.MemberIds[index] = selectedMemberId;
        }
        else
        {
            Console.WriteLine($"‚ùå ERROR: Invalid selection value {e.Value}");
        }
    }






    private async Task BookTeeTime()
    {
        Console.WriteLine($"üìå Attempting to book tee time for members: {string.Join(", ", bookingFormModel.MemberIds)}");
        
        // Check for invalid indices before looping
        for (int i = 0; i < 4; i++)  
        {
            if (i >= bookingFormModel.MemberIds.Count)
            {
                Console.WriteLine($"‚ùå ERROR: Index {i} is out of range! Current MemberIds: {string.Join(", ", bookingFormModel.MemberIds)}");
                return;  // Prevents the function from proceeding with a broken state
            }
            else
            {
                Console.WriteLine($"‚úÖ Accessing MemberIds[{i}] = {bookingFormModel.MemberIds[i]}");
            }
        }
        
        var success = await BookingService.BookTeeTimeAsync(bookingFormModel);
        if (success)
        {
            Console.WriteLine("‚úÖ Booking successful!");
            await JS.InvokeVoidAsync("showToast", "successToast"); // ‚úÖ Calls site.js function to show a success toast
            currentBookings = await BookingService.GetBookingsForDateAsync(DateTime.Now);
            bookingFormModel = new BookingDTO { MemberIds = new List<int> { 0, 0, 0, 0 } };
        }
        else
        {
            Console.WriteLine("‚ùå Booking failed. Please try again.");
            await JS.InvokeVoidAsync("showToast", "errorToast"); // ‚ùå Calls site.js function to show an error toast
        }
    }
}
